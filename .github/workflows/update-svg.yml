name: Update SVG Stats
on:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight
  workflow_dispatch: # Allows manual triggering

jobs:
  update-svg:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          
      - name: Fetch dynamic data
        id: fetch-data
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          python - <<EOF
          import requests
          import json
          import os
          import re
          from datetime import datetime, timedelta
          
          def get_page_count(link_header):
              if not link_header:
                  return 1
              matches = re.findall(r'page=(\d+)[^>]*>; rel="last"', link_header)
              return int(matches[0]) if matches else 1
          
          def get_all_pages(url, headers, params=None):
              if params is None:
                  params = {}
              
              results = []
              page = 1
              while True:
                  current_params = {**params, 'page': page, 'per_page': 100}
                  response = requests.get(url, headers=headers, params=current_params)
                  if not response.json() or response.status_code != 200:
                      break
                  results.extend(response.json())
                  
                  if 'Link' not in response.headers:
                      break
                      
                  if 'rel="next"' not in response.headers['Link']:
                      break
                      
                  page += 1
              return results
          
          # GitHub API headers
          headers = {
              'Authorization': f"Bearer {os.environ['GH_PAT']}",
              'Accept': 'application/vnd.github.v3+json'
          }
          
          username = 'MayankSuthar1'
          base_url = 'https://api.github.com'
          
          try:
              # Fetch basic user data
              user_response = requests.get(f"{base_url}/users/{username}", headers=headers)
              user_data = user_response.json()
              
              # Get all repositories (public and private)
              all_repos = get_all_pages(
                  f"{base_url}/user/repos",
                  headers=headers,
                  params={
                      'affiliation': 'owner,collaborator',
                      'visibility': 'all'
                  }
              )
              
              # Filter repos for the specific user
              user_repos = [repo for repo in all_repos if repo['owner']['login'] == username]
              
              # Calculate basic stats
              total_stars = sum(repo['stargazers_count'] for repo in user_repos)
              total_repos = len(user_repos)
              contributed_repos = len([repo for repo in all_repos if repo['owner']['login'] != username])
              
              # Initialize lines of code counters
              total_additions = 0
              total_deletions = 0
              total_commits = 0
              
              # Fetch commits and lines of code for each repository
              for repo in user_repos:
                  # Get commit count
                  commits_url = f"{base_url}/repos/{repo['owner']['login']}/{repo['name']}/commits"
                  commits = get_all_pages(
                      commits_url,
                      headers=headers,
                      params={'author': username}
                  )
                  total_commits += len(commits)
                  
                  # Get code statistics
                  stats_url = f"{base_url}/repos/{repo['owner']['login']}/{repo['name']}/stats/contributors"
                  stats_response = requests.get(stats_url, headers=headers)
                  
                  if stats_response.status_code == 202:
                      # Wait briefly and try again for stats calculation
                      import time
                      time.sleep(2)
                      stats_response = requests.get(stats_url, headers=headers)
                  
                  if stats_response.status_code == 200 and stats_response.json():
                      for contributor in stats_response.json():
                          if contributor.get('author', {}).get('login') == username:
                              for week in contributor['weeks']:
                                  total_additions += week['a']
                                  total_deletions += week['d']
              
              # Get followers
              followers = user_data['followers']
              
              # Write to GitHub Actions environment
              with open(os.environ['GITHUB_ENV'], 'a') as env_file:
                  env_file.write(f"STARS={total_stars}\n")
                  env_file.write(f"REPOS={total_repos}\n")
                  env_file.write(f"CONTRIBUTED={contributed_repos}\n")
                  env_file.write(f"COMMITS={total_commits}\n")
                  env_file.write(f"FOLLOWERS={followers}\n")
                  env_file.write(f"LOC={total_additions - total_deletions}\n")
                  env_file.write(f"LOC_ADD={total_additions}\n")
                  env_file.write(f"LOC_DEL={total_deletions}\n")
          
          except Exception as e:
              print(f"Error occurred: {str(e)}")
              raise
          EOF
          
      - name: Update SVG
        run: |
          # Create a function to format numbers with commas
          format_number() {
            printf "%'d" $1
          }
          
          # Format the numbers
          LOC_FORMATTED=$(format_number $LOC)
          LOC_ADD_FORMATTED=$(format_number $LOC_ADD)
          LOC_DEL_FORMATTED=$(format_number $LOC_DEL)
          
          # Update the SVG file
          sed -i "s/{{REPOS}}/$REPOS/g" dark_mode.svg
          sed -i "s/{{CONTRIBUTED}}/$CONTRIBUTED/g" dark_mode.svg
          sed -i "s/{{STARS}}/$STARS/g" dark_mode.svg
          sed -i "s/{{COMMITS}}/$COMMITS/g" dark_mode.svg
          sed -i "s/{{FOLLOWERS}}/$FOLLOWERS/g" dark_mode.svg
          sed -i "s/{{LOC}}/$LOC_FORMATTED/g" dark_mode.svg
          sed -i "s/{{LOC_ADD}}/$LOC_ADD_FORMATTED/g" dark_mode.svg
          sed -i "s/{{LOC_DEL}}/$LOC_DEL_FORMATTED/g" dark_mode.svg
          
      - name: Commit changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add dark_mode.svg
          git commit -m "Update SVG stats" || echo "No changes to commit"
          git push
